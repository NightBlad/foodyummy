import 'package:flutter/foundation.dart';
import '../models/recipe.dart';
import 'notification_service.dart';

class AutoNotificationService {
  static final AutoNotificationService _instance = AutoNotificationService._internal();
  factory AutoNotificationService() => _instance;
  AutoNotificationService._internal();

  final NotificationService _notificationService = NotificationService();

  // G·ª≠i th√¥ng b√°o t·ª± ƒë·ªông khi c√≥ c√¥ng th·ª©c m·ªõi
  Future<void> sendNewRecipeNotification(Recipe recipe) async {
    try {
      final title = "üçΩÔ∏è M√≥n m·ªõi ƒë√£ c√≥!";
      final body = "Kh√°m ph√° ngay c√¥ng th·ª©c \"${recipe.title}\" c√πng t√¨m hi·ªÉu ngay!";

      final data = {
        'type': 'new_recipe',
        'recipe_id': recipe.id,
        'recipe_title': recipe.title,
        'recipe_category': recipe.category,
        'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      };

      // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ users qua topic
      bool success = await _notificationService.sendNotification(
        title: title,
        body: body,
        topic: 'new_recipes', // Topic m√† t·∫•t c·∫£ users ƒë√£ subscribe
        data: data,
      );

      if (success) {
        if (kDebugMode) {
          print('Auto notification sent for new recipe: ${recipe.title}');
        }
      } else {
        if (kDebugMode) {
          print('Failed to send auto notification for recipe: ${recipe.title}');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error sending auto notification: $e');
      }
    }
  }

  // G·ª≠i th√¥ng b√°o khi c√≥ c·∫≠p nh·∫≠t c√¥ng th·ª©c
  Future<void> sendRecipeUpdateNotification(Recipe recipe) async {
    try {
      final title = "üìù C√¥ng th·ª©c ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t";
      final body = "\"${recipe.title}\" v·ª´a c√≥ nh·ªØng thay ƒë·ªïi m·ªõi. Xem ngay!";

      final data = {
        'type': 'recipe_update',
        'recipe_id': recipe.id,
        'recipe_title': recipe.title,
        'recipe_category': recipe.category,
        'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      };

      bool success = await _notificationService.sendNotification(
        title: title,
        body: body,
        topic: 'recipe_updates',
        data: data,
      );

      if (success && kDebugMode) {
        print('Update notification sent for recipe: ${recipe.title}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Error sending update notification: $e');
      }
    }
  }

  // G·ª≠i th√¥ng b√°o ch√†o m·ª´ng user m·ªõi
  Future<void> sendWelcomeNotification(String userToken) async {
    try {
      final title = "üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi FoodYummy!";
      final body = "Kh√°m ph√° h√†ng ng√†n c√¥ng th·ª©c n·∫•u ƒÉn ngon v√† d·ªÖ l√†m!";

      final data = {
        'type': 'welcome',
        'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      };

      await _notificationService.sendNotification(
        title: title,
        body: body,
        token: userToken,
        data: data,
      );
    } catch (e) {
      if (kDebugMode) {
        print('Error sending welcome notification: $e');
      }
    }
  }

  // G·ª≠i th√¥ng b√°o theo ch·ªß ƒë·ªÅ
  Future<void> sendCategoryNotification(String category, Recipe recipe) async {
    try {
      final title = "üç≥ M√≥n ${category} m·ªõi!";
      final body = "Th·ª≠ ngay c√¥ng th·ª©c \"${recipe.title}\" trong danh m·ª•c ${category}!";

      final data = {
        'type': 'category_recipe',
        'recipe_id': recipe.id,
        'recipe_title': recipe.title,
        'recipe_category': recipe.category,
        'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      };

      // G·ª≠i ƒë·∫øn topic theo category
      await _notificationService.sendNotification(
        title: title,
        body: body,
        topic: 'category_${category.toLowerCase().replaceAll(' ', '_')}',
        data: data,
      );
    } catch (e) {
      if (kDebugMode) {
        print('Error sending category notification: $e');
      }
    }
  }

  // G·ª≠i th√¥ng b√°o t√πy ch·ªânh t·ª´ admin
  Future<void> sendCustomNotification({
    required String title,
    required String body,
    String? recipeId,
    String? targetTopic,
  }) async {
    try {
      final data = <String, dynamic>{
        'type': 'custom',
        'click_action': 'FLUTTER_NOTIFICATION_CLICK',
      };

      if (recipeId != null) {
        data['recipe_id'] = recipeId;
      }

      await _notificationService.sendNotification(
        title: title,
        body: body,
        topic: targetTopic ?? 'all_users',
        data: data,
      );
    } catch (e) {
      if (kDebugMode) {
        print('Error sending custom notification: $e');
      }
    }
  }
}
