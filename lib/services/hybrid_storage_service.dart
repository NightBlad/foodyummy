import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class HybridStorageService {

  /// Upload ·∫£nh v√†o th∆∞ m·ª•c project (kh√¥ng c·∫ßn Firebase)
  Future<String> uploadImage(File imageFile, String storagePath) async {
    try {
      // L∆∞u ·∫£nh v√†o th∆∞ m·ª•c assets/images c·ªßa project
      final String localPath = await _saveToProjectAssets(imageFile);

      print('‚úÖ ƒê√£ l∆∞u ·∫£nh v√†o project: $localPath');
      return localPath;
    } catch (e) {
      throw Exception('L·ªói upload ·∫£nh: $e');
    }
  }

  /// L∆∞u ·∫£nh v√†o th∆∞ m·ª•c assets/images c·ªßa project
  Future<String> _saveToProjectAssets(File imageFile) async {
    try {
      // T·∫°o t√™n file unique
      final String fileName = 'recipe_${DateTime.now().millisecondsSinceEpoch}${path.extension(imageFile.path)}';

      // L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c assets/images
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String projectImagesPath = '${appDocDir.path}/project_images';

      // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
      final Directory imagesDir = Directory(projectImagesPath);
      if (!await imagesDir.exists()) {
        await imagesDir.create(recursive: true);
      }

      // Copy file v√†o th∆∞ m·ª•c project
      final String localFilePath = '$projectImagesPath/$fileName';
      final File localFile = await imageFile.copy(localFilePath);

      // Tr·∫£ v·ªÅ relative path ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
      return 'assets/images/$fileName';

    } catch (e) {
      throw Exception('L·ªói l∆∞u ·∫£nh v√†o project: $e');
    }
  }

  /// Copy ·∫£nh t·ª´ app documents v·ªÅ assets/images ƒë·ªÉ hi·ªÉn th·ªã
  Future<void> _copyToAssetsFolder(String fileName, File sourceFile) async {
    try {
      // L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c project
      final String currentDir = Directory.current.path;
      final String assetsPath = '$currentDir/assets/images';

      // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
      final Directory assetsDir = Directory(assetsPath);
      if (!await assetsDir.exists()) {
        await assetsDir.create(recursive: true);
      }

      // Copy file
      final String targetPath = '$assetsPath/$fileName';
      await sourceFile.copy(targetPath);

      print('üìÇ ƒê√£ copy ·∫£nh v√†o assets: $targetPath');
    } catch (e) {
      print('‚ö†Ô∏è Kh√¥ng th·ªÉ copy v√†o assets: $e');
    }
  }

  /// L·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã
  Future<String> getImagePath(String imagePath) async {
    try {
      // N·∫øu l√† ƒë∆∞·ªùng d·∫´n assets
      if (imagePath.startsWith('assets/images/')) {
        // Ki·ªÉm tra trong app documents tr∆∞·ªõc
        final Directory appDocDir = await getApplicationDocumentsDirectory();
        final String fileName = imagePath.split('/').last;
        final String localPath = '${appDocDir.path}/project_images/$fileName';

        if (await File(localPath).exists()) {
          return localPath;
        }
      }

      // N·∫øu l√† ƒë∆∞·ªùng d·∫´n local ƒë·∫ßy ƒë·ªß
      if (imagePath.contains('/project_images/') && await File(imagePath).exists()) {
        return imagePath;
      }

      // Fallback
      return imagePath;
    } catch (e) {
      return imagePath;
    }
  }

  /// X√≥a ·∫£nh
  Future<void> deleteImage(String imagePath) async {
    try {
      if (imagePath.startsWith('assets/images/')) {
        final Directory appDocDir = await getApplicationDocumentsDirectory();
        final String fileName = imagePath.split('/').last;
        final String localPath = '${appDocDir.path}/project_images/$fileName';

        final File localFile = File(localPath);
        if (await localFile.exists()) {
          await localFile.delete();
          print('üóëÔ∏è ƒê√£ x√≥a ·∫£nh: $localPath');
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è L·ªói x√≥a ·∫£nh: $e');
    }
  }

  /// L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh trong project
  Future<List<String>> getAllProjectImages() async {
    try {
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String projectImagesPath = '${appDocDir.path}/project_images';
      final Directory imagesDir = Directory(projectImagesPath);

      if (!await imagesDir.exists()) {
        return [];
      }

      final List<FileSystemEntity> files = await imagesDir.list().toList();
      return files
          .where((file) => file is File)
          .map((file) => file.path)
          .toList();
    } catch (e) {
      print('‚ö†Ô∏è L·ªói l·∫•y danh s√°ch ·∫£nh: $e');
      return [];
    }
  }

  /// D·ªçn d·∫πp ·∫£nh c≈© (ch·∫°y ƒë·ªãnh k·ª≥)
  Future<void> cleanupOldImages() async {
    try {
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String projectImagesPath = '${appDocDir.path}/project_images';
      final Directory imagesDir = Directory(projectImagesPath);

      if (!await imagesDir.exists()) {
        return;
      }

      final List<FileSystemEntity> files = await imagesDir.list().toList();
      final DateTime cutoffDate = DateTime.now().subtract(const Duration(days: 30));

      for (var file in files) {
        if (file is File) {
          final FileStat stat = await file.stat();
          if (stat.modified.isBefore(cutoffDate)) {
            await file.delete();
            print('üßπ ƒê√£ x√≥a ·∫£nh c≈©: ${file.path}');
          }
        }
      }
    } catch (e) {
      print('‚ö†Ô∏è L·ªói d·ªçn d·∫πp ·∫£nh: $e');
    }
  }
}
